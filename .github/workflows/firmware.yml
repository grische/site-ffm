name: Build ffmuc firmware

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  generate_target_matrix:
    runs-on: ubuntu-latest
    outputs:
      target_json: ${{ steps.set_target.outputs.target }}
    steps:
    - name: Set target matrix
      id: set_target
      shell: bash
      run: |
        target_list="[\"ath79-generic\"]"
        echo ::set-output name=target::{\"target\": $(echo $target_list)}\"

  build_firmware:
    needs: generate_target_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.target_json) }}
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python2.7 python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf
      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          git checkout -b patched ${GITHUB_SHA}
          make BROKEN=1 GLUON_TARGETS=${{ matrix.target }} V=s
          echo "::set-output name=status::success"
      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.target }}_output
          path: ./output

  create_release:
    runs-on: ubuntu-latest
    needs: build_firmware
    if: github.event_name != 'pull_request'
    outputs:
          output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload_release:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.target_json) }}
    runs-on: ubuntu-latest
    needs: [ create_release, generate_target_matrix ]
    if: github.event_name != 'pull_request'
    steps:
      - name: Download Artifact ${{ matrix.target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}_output
          path: ${{ matrix.target }}_output
      - name: Create ${{ matrix.target }}_output.tar.gz
        run: tar zcvf ${{ matrix.target }}_output.tar.gz ${{ matrix.target }}_output
      - name: Upload Release Asset ${{ matrix.target }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.output1 }}
          asset_path: ./${{ matrix.target }}_output.tar.gz
          asset_name: ${{ matrix.target }}_output.tar.gz
          asset_content_type: application/gzip
