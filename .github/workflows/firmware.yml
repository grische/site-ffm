name: Build ffmuc firmware

on:
  workflow_dispatch:
  push:
    tags:
      - v*
  pull_request:
    paths-ignore:
      - "**.md"
      - "**/CODEOWNERS"
      - ".github/ISSUE_TEMPLATE"
      - ".github/*.yml"

jobs:
  generate_target_matrix:
    runs-on: ubuntu-latest
    outputs:
      target_json: ${{ steps.set_target.outputs.target }}
      build_target_json: ${{ steps.set_target.outputs.build_target }}
    steps:
      - name: Set target matrix
        id: set_target
        shell: bash
        run: |
          target_list="[\"ath79-generic\", \"ath79-nand\", \"bcm27xx-bcm2708\", \"bcm27xx-bcm2709\", \"bcm27xx-bcm2710\", \"bcm27xx-bcm2711\", \"ipq40xx-generic\", \"ipq806x-generic\", \"lantiq-xway\", \"lantiq-xrx200\", \"mediatek-mt7622\", \"mpc85xx-p1010\", \"mpc85xx-p1020\", \"mvebu-cortexa9\", \"ramips-mt7620\", \"ramips-mt7621\", \"ramips-mt76x8\", \"rockchip-armv8\", \"sunxi-cortexa7\", \"x86-64\", \"x86-generic\", \"x86-geode\", \"x86-legacy\"]"
          echo ::set-output name=target::{\"target\": $(echo $target_list)}\"
          echo ::set-output name=build_target::{\"target\": $(echo $target_list | sed 's/, "x86-64"//')}\"

  build_firmware:
    needs: generate_target_matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.build_target_json) }}
    runs-on: ubuntu-latest
    # Only build if the matrix is not empty
    if: |
      needs.generate_target_matrix.outputs.build_target_json != ''
      && needs.generate_target_matrix.outputs.build_target_json != '[]'
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Install build dependencies
        run: |
          sudo -E ./scripts/install_build_dependencies.sh
      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          git checkout -b patched ${GITHUB_SHA}
          make BROKEN=1 GLUON_TARGETS=${{ matrix.target }} V=s
          echo "::set-output name=status::success"
      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.target }}_output
          path: ./output

  build_firmware_on_arm64:
    needs: generate_target_matrix
    strategy:
      fail-fast: false
      matrix:
        target: ["x86-64"]
    runs-on: "ARM64"
    # Only build if the matrix is not empty
    if: |
      needs.generate_target_matrix.outputs.build_target_json != ''
      && needs.generate_target_matrix.outputs.build_target_json != '[]'
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Install build dependencies
        run: |
          sudo -E ./scripts/install_build_dependencies.sh
      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          git checkout -b patched ${GITHUB_SHA}
          make BROKEN=1 GLUON_TARGETS=${{ matrix.target }} V=s
          echo "::set-output name=status::success"
      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.target }}_output
          path: ./output

  check_all_firmware_builds:
    needs:
      - build_firmware
      - build_firmware_on_arm64
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.build_firmware.result == 'success' || needs.build_firmware.result == 'skipped') &&
      (needs.build_firmware_on_arm64.result == 'success' || needs.build_firmware_on_arm64.result == 'skipped')
    steps:
      - run: echo "All releases built or skipped"

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build_firmware
      - build_firmware_on_arm64
    if: github.event_name != 'pull_request'
    outputs:
      output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload_release:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.target_json) }}
    runs-on: ubuntu-latest
    needs:
      - create_release
      - generate_target_matrix
    if: github.event_name != 'pull_request'
    steps:
      - name: Download Artifact ${{ matrix.target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}_output
          path: ${{ matrix.target }}_output
      - name: Create ${{ matrix.target }}_output.tar.gz
        run: tar zcvf ${{ matrix.target }}_output.tar.gz ${{ matrix.target }}_output
      - name: Upload Release Asset ${{ matrix.target }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.output1 }}
          asset_path: ./${{ matrix.target }}_output.tar.gz
          asset_name: ${{ matrix.target }}_output.tar.gz
          asset_content_type: application/gzip
