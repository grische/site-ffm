name: Build ffmuc firmware

on:
  workflow_dispatch:
  push:
    tags:
      - v*
  pull_request:

jobs:
  generate_target_matrix:
    runs-on: ubuntu-latest
    outputs:
      target_json: ${{ steps.set_target.outputs.target }}
    steps:
    - name: Set target matrix
      id: set_target
      shell: bash
      run: true

  build_firmware:
    needs: generate_target_matrix
    strategy:
      fail-fast: false
      matrix:
        target: [ "ath79-generic" ]
        package: [ "antlr3", "asciidoc", "autoconf", "automake", "autopoint", "binutils", "build-essential", "bzip2", "device-tree-compiler", "flex", "g++-multilib", "gawk", "gcc-multilib", "gettext", "git", "gperf", "lib32gcc1", "libc6-dev-i386", "libelf-dev", "libglib2.0-dev", "libncurses5-dev", "libssl-dev", "libtool", "libz-dev", "msmtp", "p7zip", "p7zip-full", "patch", "python2.7", "python3", "qemu-utils", "subversion", "texinfo", "uglifyjs", "unzip", "upx", "wget", "xmlto", "zlib1g-dev" ]

    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 4096
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 0
      - name: Install build dependencies
        run: |
          sudo apt-get purge -y ${{ matrix.package }}
          sudo apt-get autoremove -y
          sed -i "/${{ matrix.package }}/d" ./install_build_dependencies.sh
          sudo -E ./install_build_dependencies.sh
      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          git checkout -b patched ${GITHUB_SHA}
          make BROKEN=1 GLUON_TARGETS=${{ matrix.target }} V=s
          echo "::set-output name=status::success"
      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ matrix.target }}_${{ matrix.package }}_output
          path: ./output

  create_release:
    runs-on: ubuntu-latest
    needs: build_firmware
    if: github.event_name != 'pull_request'
    outputs:
          output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  upload_release:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_target_matrix.outputs.target_json) }}
    runs-on: ubuntu-latest
    needs: [ create_release, generate_target_matrix ]
    if: github.event_name != 'pull_request'
    steps:
      - name: Download Artifact ${{ matrix.target }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.target }}_output
          path: ${{ matrix.target }}_output
      - name: Create ${{ matrix.target }}_output.tar.gz
        run: tar zcvf ${{ matrix.target }}_output.tar.gz ${{ matrix.target }}_output
      - name: Upload Release Asset ${{ matrix.target }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.output1 }}
          asset_path: ./${{ matrix.target }}_output.tar.gz
          asset_name: ${{ matrix.target }}_output.tar.gz
          asset_content_type: application/gzip
